import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import argparse
import requests

from src.my_log import get_logger
from src.poem_generator import PoemModel


# SETTING LOGGER ---------------------------
logger = get_logger(name=__name__)

# READ REGISTRY VIA HTTP ---------------------------
registry_url = (
    "https://minio.lab.sspcloud.fr/paultoudret/ensae-reproductibilite/Phoetry/Poem_models/model_available.json"
)
logger.info(f"Fetching model registry from {registry_url}")
resp = requests.get(registry_url)
resp.raise_for_status()
available_models = resp.json()

# PARSE COMMAND‑LINE ARGUMENTS ---------------------------
parser = argparse.ArgumentParser(
    description="Choose a fine‑tuned Poem model and a theme"
)
parser.add_argument(
    "--model",
    type=str,
    choices=list(available_models.keys()),
    required=True,
    help="Name of the fine‑tuned model to use"
)
parser.add_argument(
    "--theme",
    type=str,
    required=True,
    help="Prompt theme to seed the poem generation"
)
args = parser.parse_args()

# SELECT MODEL AND URL ---------------------------
model_name = args.model
model_url = available_models[model_name]
logger.info(f"Selected model '{model_name}' → {model_url}")

# INITIALIZE AND GENERATE ---------------------------
poem_model = PoemModel(URL=model_url)
poem = poem_model.generate_poem(poem_type=model_name, theme=args.theme)

# RESULT ---------------------------
print("\n" + "="*60)
print(f"Poem generated by '{model_name}' with theme '{args.theme}'")
print("-"*60)
print(poem)
print("="*60 + "\n")
